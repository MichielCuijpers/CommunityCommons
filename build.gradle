apply plugin: 'java'

sourceCompatibility = '1.8'
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

project.ext {
    CC_VERSION = '8.4.0'
    mendixVersion = '8.12.7'
}

def userLibDir = "$projectDir/src/CommunityCommons/userlib"

repositories {
    maven {
        url 'https://nexus.rnd.mendix.com/repository/repo1-proxy/'
    }
    maven {
        url 'https://nexus.rnd.mendix.com/repository/maven-hosted/'
    }    
}

dependencies {

    testImplementation(
        [group: 'com.mendix', name: 'public-api', version: "$mendixVersion"],
        [group: 'junit', name: 'junit', version: '4.13.2'],
        [group: 'org.apache.httpcomponents', name: 'httpcore', version: '4.4.14'],
        [group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.13']
    )

    compileOnly([group: 'com.mendix', name: 'public-api', version: "$mendixVersion"])

    implementation(
        [group: 'com.google.guava', name: 'guava', version: '30.0-jre'],
        [group: 'com.googlecode.owasp-java-html-sanitizer', name: 'owasp-java-html-sanitizer', version: '20200713.1'],
        [group: 'commons-io', name: 'commons-io', version: '2.8.0'],
        [group: 'org.apache.pdfbox', name: 'pdfbox', version: '2.0.23'],
        [group: 'org.apache.commons', name: 'commons-lang3', version: '3.11']
    )
}

sourceSets {
    main {
        java {
            srcDir 'src/CommunityCommons/javasource'
            exclude 'unittesting/**'
            exclude 'system/UserActionsRegistrar.java'
        }
    }
    test {
        java {
            srcDirs = ["src/test", "src/CommunityCommons/javasource"]
        }
    }
}

test {
    exclude 'unittesting/*'
}

task copyAllToUserlib( type: Copy ) {
    from configurations.testCompileClasspath
    into userLibDir
    eachFile { fileCopyDetails -> new File( destinationDir, "${fileCopyDetails.name}.${project.name}.RequiredLib").write '' }
}

task copyRuntimeToUserlib( type: Copy ) {
    from configurations.runtimeClasspath
    into userLibDir
    eachFile { fileCopyDetails -> new File( destinationDir, "${fileCopyDetails.name}.${project.name}.RequiredLib").write '' }
}

clean {
    delete "$projectDir/src/CommunityCommons/userlib"
}
